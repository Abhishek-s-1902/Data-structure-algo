

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Heapsort {
	
	static double array[];
	public static int heapSize;
	public static int Alength ;
	
static long milliSeconds = 0;
	
	public static void start() {
        milliSeconds = System.currentTimeMillis();
           }
	
	 public static void end() {
        System.err.println(  ": Time for HeapSort:  " + ( System.currentTimeMillis() - milliSeconds) );
        
        
         }
	 
	
	public static void random(int range){
		 array = new double[range];
		 Random Randomno = new Random();

	      
	      Randomno.setSeed(1015);
		for(int i = 0;i<range;i++){
			array[i] = Randomno.nextDouble() * range;
			//System.out.println(array[i]);
		}
		
	}
	
	
	
	
public static void swap(int i, int j){
		
		//System.out.println("inside swap "+ array[i]+ " "+array[j]);
		double temp = array[j];
		array[j] = array[i];
		array[i] = temp;
	}
	
	
	
	
	public static void heapify(int i){
	
		int left = 2*i+1;
		int right = 2*i+2;
		int maxelement_pos = i;
		
		if(left<heapSize && array[left]>array[i]){
			maxelement_pos = left;
	    }
		
		if(right<heapSize && array[right]>array[maxelement_pos])
	    {
			maxelement_pos= right;
	    }
		
		 if(maxelement_pos!=i)
		    {
			 swap(maxelement_pos,i);
			 
			 heapify(maxelement_pos);
		    }
		
	}
	
		
	
	public static void build_maxheap()
	{
	    heapSize = array.length;     //heap size initialised
	    for(int i=array.length/2; i>=0;i--)//since n/2, n/2+1 ... are leaves we can start from n/2 step downwards
	    {
	        //call MAX_HEAPIFY on each root node starting from n/2
	        heapify(i);
	    }
	}

	
	
	
	public static void heapSort(double array[])
	{
	   
	    build_maxheap();
	    
	    
	
	    for(int i=array.length-1;i>=0;i--)
	    {
	        
	        double temp = array[0];
	        array[0]=array[i];
	        array[i]=temp;
	        heapSize  = heapSize-1;
	       
	        heapify(0);
	    }
	    
	}
	
	
	
	
	public static void main(String[] args) {
		
		int range = Integer.parseInt(args[0]);
		random(range);
		 start();
		 heapSort(array);
		 end();
		 
		 Scanner  Sc = new Scanner (System.in);
	       
		 System.out.println("sorted list");
		 int S = Sc.nextInt();
		 System.out.println(Arrays.toString(array));

	
	}

}
